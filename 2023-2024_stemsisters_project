import cv2
import mediapipe as mp

# 1. lépés

from mediapipe import solutions
from mediapipe.framework.formats import landmark_pb2
import numpy as np

MARGIN = 10  # pixels
FONT_SIZE = 1
FONT_THICKNESS = 1
HANDEDNESS_TEXT_COLOR = (88, 205, 54) # vibrant green

def draw_landmarks_on_image(rgb_image, detection_result):
  hand_landmarks_list = detection_result.hand_landmarks
  handedness_list = detection_result.handedness
  annotated_image = np.copy(rgb_image)

  # Loop through the detected hands to visualize.
  for idx in range(len(hand_landmarks_list)):
    hand_landmarks = hand_landmarks_list[idx]
    handedness = handedness_list[idx]

    # Draw the hand landmarks.
    hand_landmarks_proto = landmark_pb2.NormalizedLandmarkList()
    hand_landmarks_proto.landmark.extend([
      landmark_pb2.NormalizedLandmark(x=landmark.x, y=landmark.y, z=landmark.z) for landmark in hand_landmarks
    ])
    solutions.drawing_utils.draw_landmarks(
      annotated_image,
      hand_landmarks_proto,
      solutions.hands.HAND_CONNECTIONS,
      solutions.drawing_styles.get_default_hand_landmarks_style(),
      solutions.drawing_styles.get_default_hand_connections_style())

    # Get the top left corner of the detected hand's bounding box.
    height, width, _ = annotated_image.shape
    x_coordinates = [landmark.x for landmark in hand_landmarks]
    y_coordinates = [landmark.y for landmark in hand_landmarks]
    text_x = int(min(x_coordinates) * width)
    text_y = int(min(y_coordinates) * height) - MARGIN

    # Draw handedness (left or right hand) on the image.
    cv2.putText(annotated_image, f"{handedness[0].category_name}",
                (text_x, text_y), cv2.FONT_HERSHEY_DUPLEX,
                FONT_SIZE, HANDEDNESS_TEXT_COLOR, FONT_THICKNESS, cv2.LINE_AA)

  return annotated_image

import math
def normalformat(adatfile):
    with open(adatfile) as f:
        lines = f.readlines()
    adat_0 = lines[0]
    
    #szétválasztás
    adat_0 = adat_0[2:(len(adat_0)-2)]
    adatok = adat_0.split("NormalizedLandmark(")
    adatok = adatok[1:22]
    
    #egységesítés
    for i in range(19):
        adatok[i] = adatok[i][0:len(adatok[i])-3]
    adatok[20] = adatok[20][0:len(adatok[20])-1]
    
    #szelektálás
    adat_lista = []
    for i in range(len(adatok)):
        lista = adatok[i].split("=")
        adat_lista.append(lista)
        
    #végső formátum
    adat = []
    for i in adat_lista:
        lista = []
        lista.append(float(i[1][0:-3]))
        lista.append(float(i[2][0:-3]))
        lista.append(float(i[3][0:-12]))
        adat.append(lista)
        
    #referencia pont
    ref_pont = adat[0]
    
    #kivonás
    kivont = []
    
    for i in range(21):
        for n in range(len(adat)-i):
            # x koordináta
            x = adat[i][0] - adat[n+i][0]
    
            # y koordináta
            y = adat[i][1] - adat[n+i][1]
    
            # z koordináta
            z = adat[i][2] - adat[n+i][2]
        
            kivont.append([x, y, z])
    
    #távolság (y < 0 == fent, y >= 0 == lent)
    tavolsag = []
    for i in kivont:
        if i[2] < 0:
            szorzo = -1
        else:
            szorzo = 1
            
        tav = math.sqrt(i[0]**2 + i[1]**2 + i[2]**2)*szorzo
        tavolsag.append(tav)
    
    #egyseges
    egyseg = 1/(tavolsag[16])
    
    tanito_adat = []
    for i in tavolsag:
        if i != -0.0:
            tanito_adat.append(i*egyseg)
    
    return tanito_adat

import pandas as pd
import os
# assign directory

#Up
adatok = {}
directory = 'Up'
 
# iterate over files in
# that directory
index = 0
for filename in os.listdir(directory):
    
    f = os.path.join(directory, filename)
    try:
        lista = ['up']
        for i in normalformat(f):
            lista.append(i)
        adatok[str(index)] = lista
        index += 1
    except:
        pass

#Down
directory = 'Down'
for filename in os.listdir(directory):
    
    f = os.path.join(directory, filename)
    try:
        lista = ['down']
        for i in normalformat(f):
            lista.append(i)
        adatok[str(index)] = lista
        index += 1
    except:
        pass

#Click
directory = 'Click'
for filename in os.listdir(directory):
    
    f = os.path.join(directory, filename)
    try:
        lista = ['click']
        for i in normalformat(f):
            lista.append(i)
        adatok[str(index)] = lista
        index += 1
    except:
        pass

#Mouse
directory = 'Mouse'
for filename in os.listdir(directory):
    
    f = os.path.join(directory, filename)
    try:
        lista = ['mouse']
        for i in normalformat(f):
            lista.append(i)
        adatok[str(index)] = lista
        index += 1
    except:
        pass

#Stay_clicked
directory = 'Stay_clicked'
for filename in os.listdir(directory):
    
    f = os.path.join(directory, filename)
    try:
        lista = ['stay_clicked']
        for i in normalformat(f):
            lista.append(i)
        adatok[str(index)] = lista
        index += 1
    except:
        pass
    
#create dataframe
columns = ('hand
df = pd.DataFrame(adatok).T
df.columns = columns

from sklearn.model_selection import train_test_split

X = dfvalues
y = df['hand'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

from sklearn.tree import DecisionTreeClassifier

dtree = DecisionTreeClassifier()
dtree.fit(X_train, y_train)

predictions = dtree.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
print(confusion_matrix(y_test, predictions))
print(classification_report(y_test, predictions))

# futtatas

from mediapipe.tasks import python
from mediapipe.tasks.python import vision

# STEP 2: Create an HandLandmarker object.
base_options = python.BaseOptions(model_asset_path='hand_landmarker.task')
options = vision.HandLandmarkerOptions(base_options=base_options,
                                       num_hands=2)
detector = vision.HandLandmarker.create_from_options(options)

# kamera
import mouse
import cv2
import time

cam = cv2.VideoCapture(0)

#index = 90

while True:
        
    # Capture the video frame by frame 
    ret, frame = cam.read()
    
    name = 'hand.jpg'
    cv2.imwrite(name, frame)
    
    image = mp.Image.create_from_file(name)
    
    detection_result = detector.detect(image)
        
    # STEP 5: Process the classification result. In this case, visualize it.
    annotated_image = draw_landmarks_on_image(image.numpy_view(), detection_result)
    cv2.imshow('camera', cv2.cvtColor(annotated_image, cv2.COLOR_RGB2BGR))
    
    file_1 = open('real_time_hand.txt', 'w')
    file_1.write(str(detection_result.hand_landmarks))
    file_1.close
    try:
        columns_proba = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210')
        df_proba = pd.DataFrame(normalformat('real_time_hand.txt')).T
        df_proba.columns = columns_proba
        hand = dtree.predict(df_proba)
    except:
        hand = 0
    
    if hand == ['up']:
        mouse.wheel(0.5)
     
    if hand == ['down']:
        mouse.wheel(-0.5)
    
    if hand == ['click']:
        mouse.click('left')
        time.sleep(1)
    
    # S-RE ELMENTI A KÉP ADATAIT
    #if cv2.waitKey(1) & 0xFF == ord('s'):
        #file = open('Up/kezek_%s.txt' %(str(index)), 'w')
        #file.write(str(detection_result.hand_landmarks))
        #file.close()
        #index += 1
    
    # A-RA KIÍRJA A KÉZJELET
    if cv2.waitKey(1) & 0xFF == ord('a'):
        file_1 = open('real_time_hand.txt', 'w')
        file_1.write(str(detection_result.hand_landmarks))
        file_1.close
        try:
            columns_proba = ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '100', '101', '102', '103', '104', '105', '106', '107', '108', '109', '110', '111', '112', '113', '114', '115', '116', '117', '118', '119', '120', '121', '122', '123', '124', '125', '126', '127', '128', '129', '130', '131', '132', '133', '134', '135', '136', '137', '138', '139', '140', '141', '142', '143', '144', '145', '146', '147', '148', '149', '150', '151', '152', '153', '154', '155', '156', '157', '158', '159', '160', '161', '162', '163', '164', '165', '166', '167', '168', '169', '170', '171', '172', '173', '174', '175', '176', '177', '178', '179', '180', '181', '182', '183', '184', '185', '186', '187', '188', '189', '190', '191', '192', '193', '194', '195', '196', '197', '198', '199', '200', '201', '202', '203', '204', '205', '206', '207', '208', '209', '210')
            df_proba = pd.DataFrame(normalformat('real_time_hand.txt')).T
            df_proba.columns = columns_proba
            hand = dtree.predict(df_proba)
            print(hand)
        except:
            pass
    
    # Q-RA KILÉP

    if cv2.waitKey(1) & 0xFF == ord('q'): 
        break

# After the loop release the cap object 
cam.release() 

# Destroy all the windows 
cv2.destroyAllWindows()
